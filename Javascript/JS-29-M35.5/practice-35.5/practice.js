//  একটা অবজেক্ট ডিক্লেয়ার করো। সেই অবজেক্ট এর মিনিমাম পাঁচটা প্রপার্টি থাকবে। তারপর একটা প্রপার্টি এর মান হবে অন্য আরেকটা অবজেক্ট , আরেকটা প্রপার্টি এর মান হবে একটা array । একটা প্রপার্টি এর মান হবে একটা ফাংশন(মেথড) । এই মেথড কে কল করলে সে মেথড এর ভিতর থেকে অবজেক্ট এর যেকোন একটা প্রপার্টি রিটার্ন করবে। আর বাকি দুইটা তোমার ইচ্ছা মতো।
const obj = {
   phone: 'Samsung',
   price: {
      GB_128: 50000,
      GB_64: 40000,
      GB_32: 30000,
   },
   storage: ['8/128', '6/64', '4/32'],
   display: 'Super amoled display',

   displays: function () {
      const display = this.display
      return display
   }

}

// ২. একটা টেম্পলেট স্ট্রিং দিয়ে একটা স্ট্রিং ভেরিয়েবল ডিক্লেয়ার করো। সেটার মধ্যে উপরের অবজেক্ট এর একটা তিনটা প্রপার্টি এর মান তোমার টেমপ্লেট স্ট্রিং এর মধ্যে বসাও। এর মধ্যে একটা প্রপার্টি সেট করবে--যেটা নেস্টেড অবজেক্ট আছে সেটার প্রপার্টি থেকে। আরেকটা প্রপার্টি হবে যে প্রপার্টি এর মান একটা array সেটার সেকেন্ড পজিশন এর উপাদান দিয়ে। আর বাকি একটা তোমার ইচ্ছা মতো বসাতে পারো।
const templateString = `Phone: ${obj.phone}, Storage: ${obj.storage[0]}, Price: ${obj.price.GB_128}, Display: ${obj.displays()}`
console.log(templateString)


// ৩.১. শূন্য প্যারামিটার ওয়ালা একটা অ্যারো ফাংশন লিখবে যেটা ৮৯ রিটার্ন করবে। 
const zeroParameter = () => {
   return 89
}
const a = zeroParameter()
console.log(a)


// ৩.২. এক প্যারামিটার ওয়ালা একটা অ্যারো ফাংশন ডিক্লেয়ার করবে। এই ফাংশনের কাজ হবে যে প্যারামিটার নিবে সেটাকে 17 দিয়ে ভাগ করে ভাগফল রিটার্ন করবে। 
const oneParameter = (number) => {
   const result = number / 17
   return result
}
const divide = oneParameter(170)
console.log(divide)


// ৩.৩ দুই, প্যারামিটার ওয়ালা একটা অ্যারো ফাংশন লিখবে। এই ফাংশনের কাজ হবে যে দুইটা প্যারামিটার ইনপুট নিবে। সেই দুইটা প্যারামিটারকে যোগ করে যোগফলকে দুই দিয়ে ভাগ করে ভাগফল রিটার্ণ করে দাও।
const addDivide = (num1, num2) => {
   const result = (num1 + num2) / 2
   return result
}
const add = addDivide(10, 20)
console.log(add)


// ৩.৪ একাধিক লাইন ওয়ালা অ্যারো ফাংশন লিখো। সেটাতে দুইটা প্যারামিটার নিবে। ওই arrow ফাংশনটা হবে অনেকগুলা লাইনের। সেখানে প্রত্যেকটা ইনপুট প্যারামিটার এর সাথে ৭ যোগ করবে তারপর যোগফল দুইটাকে আবার যোগ করবে। ক্যামনে করবে সেটা চিন্তা করে বের করার চেষ্টা করো। 
const arrfunc = (num1, num2) => {
   const numOne = num1 + 7
   const numtwo = num2 + 7
   const total = numOne + numtwo
   return total
}
const sum = arrfunc(30, 30)
console.log(sum)


// ৪. অনেকগুলা সংখ্যার একটা array হবে। তারপর তোমার কাজ হবে array এর উপরে map ইউজ করে। প্রত্যেকটা উপাদানকে ৭ দিয়ে ভাগ করে ভাগফল আরেকটা array হিসেবে রাখবে। পুরা কাজটা এক লাইনে হবে। 
let numbers = [14, 28, 21, 35, 42, 56, 64, 35, 49, 63].map((num) => num = num / 7)
console.log(numbers)


// ৫. জাভাস্ক্রিপ্ট এ array এর map, forEach, filter, find কোনটা দিয়ে কি হয়। সেটার একটা সামারি লিখে ফেলো।
/*
Map():
যখনই আমরা কোন Array তে map()এপ্লাই করি তখন এই মেথড তার আর্গুমেন্ট হিসেবে একটা user define function নেয়, সেই functionঐ Array র প্রতিটা element এ এপ্লাই হয় এবং তার উপর ভিত্তি করে ফাইনালি নতুন একটা Array রিটার্ন করে। 
*/
/* 
forEach():
forEach কোনো array মধ্যে যতগুলো element আছে সেসব array কে নিয়ে annonymous function এ একটা arguments নিয়ে প্রত্যেকটা array কে ধরে কোনো একটা কাজ করবে।
*/
/* 
Filter():
ফিল্টার মেথড টা খুবই মজার, filter() ওয়ার্ড টা শুনলেই অনেকটা বুঝা যায় এর কাজটা কি, filter() মানে হচ্ছে ছাঁকনি, এখন কথা হচ্ছে এই ছাঁকনি দিয়ে অ্যারেতে কি কাজ, আচ্ছা দেখা যাক কি করা যায় এই ছাঁকনি দিয়ে।

একটা অ্যারে হতে বিভিন্নভাবে নির্দিষ্ট কিছু ইলিমেন্ট গুলাকে বের করে করে নতুন অ্যারেতে রাখাই এই filter() এর কাজ।

Syntax:

এর সিনট্যাক্স পুরটাই map() এর মত, শুধু একটু পার্থক্য আছে, সেটা হলো এর কলব্যাক ফাংশনটা রিটার্ন করে boolean: true or false যদি true রিটার্ন করে, তাহলে নতুন অ্যারেতে ঐ ভ্যালুটি বসিয়ে দেয়, আর যদি false করে তাহলে নতুন অ্যারেতে ভ্যালুটি বসাবে না।
*/
/* 
find():
find ekta array er upor matching data return kore, and se ekta element return korbe ba matching element return korbe.
*/


// ৬. সিম্পল একটা জাভাস্ক্রিপ্ট অবজেক্ট এর কোন একটা প্রোপার্টিকে ভেরিয়েবল হিসেবে ডিক্লেয়ার করার জন্য destructuring ইউজ করো। array এর destructuring করবে আর সেটা করার জন্য তুমি এরে এর সেকেন্ড পজিশন এর উপাদান কে destructuring করে 'balance' নামক একটা ভেরিয়েবল এ রাখবে।
const [n1, n2, n3, n4] = [10, 20, 30, 40]
const balance = n2
console.log(n2)